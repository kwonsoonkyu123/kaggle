21*3/4
?rlm
library(MASS)
?rlm
?;lm
?lm
summary(stackloss)
boxplot(stackloss)
data("UScrime")
attach(UScrime)
radius <- sqrt(Pop)
U2
str(U2)
symbols(U2, y, ciircles=radius)
symbols(U2, y, circles=radius)
symbols(U2, y, circles=radius, inches=0.4)
?inch
?symbols
symbols(U2, y, circles=radius, inches=TRUE)
symbols(U2, y, circles=radius, inches=FALSE)
symbols(U2, y, circles=radius, inches=1)
symbols(U2, y, circles=radius, inches=2)
symbols(U2, y, circles=radius, inches=FALSE)
symbols(U2, y, circles=radius, inches=1.9)
symbols(U2, y, circles=radius, inches=1.9, lwd=2)
library(RColorBrewer)
?brewer.pal
brewer.pal(9,"Blues")
brewer.pal(9,"Blues", type="div")
brewer.pal(9,type="div")
display.brewer.all(9,"Blues")
display.brewer.all(9,type="div")
?brewer.pal
?brewer.pal.info
dnorm(0)
dnorm(1)
pnorm(0)
qnorm(0)
qnorm(1)
qnorm(0.5)
kde2d()
kde2d
?image
A <- matrix(0,5,5)
edge.list <- matrix(
c(1,2,
1,3,
1,5,
2,3,
3,1,
3,4,
5,1),byrow=T,nrow=7)
)
A <- matrix(0,5,5)
edge.list <- matrix(
c(1,2,
1,3,
1,5,
2,3,
3,1,
3,4,
5,1),byrow=T,nrow=7
)
A[edge.list] <- 1
A
gplot(A)
library(sna)
gplot(A)
gplot(A, displaylabels=TRUE)
gplot(A, displaylabels=TRUE, boxed.labels=F)
gplot(A, displaylabels=TRUE, boxed.labels=T)
gplot(A, displaylabels=TRUE, boxed.labels=T, vertex.cex=2)
gplot(A, displaylabels=TRUE, boxed.labels=T, vertex.cex=0.2)
gplot(A, displaylabels=TRUE, boxed.labels=T, vertex.cex=0.2)
D <- geodist(A)
D
D$gdist
D <- D$gdist
apply(D,1,sum)
apply(D,2,sum)
degree(A)
degree(A, cmode="indegree")
degree(A, cmode=outdegree)
degree(A, cmode="outdegree")
gden(A)
library(sna)
n <- 10
N <- n*(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
round(mean(degree(world.n)))
round(mean(degree(world.n)),1)
degree(world.n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
median(D.n)
D.n
gplot(world.n)
?rgraph
n <- 10
N <- n(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
addmargins(round(table(D.n)/N*100,1))
gplot(world.n, displaylabels=T)
round(table(D.n)/N*100,1)
n <- 100
N <- n(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
addmargins(round(table(D.n)/N*100,1))
gplot(world.n, displaylabels=T)
n <- 1000
N <- n(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
addmargins(round(table(D.n)/N*100,1))
gplot(world.n, displaylabels=T)
n <- 1000
N <- n(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
addmargins(round(table(D.n)/N*100,1))
gplot(world.n, displaylabels=T)
n <- 1000
N <- n(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
addmargins(round(table(D.n)/N*100,1))
n <- 1000
N <- n(n+1)
n <- 1000
N <- n*(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
addmargins(round(table(D.n)/N*100,1))
n <- 1000
N <- n*(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
diag(D.n) <- NA
median(D.n,na.rm=T)
addmargins(round(table(D.n)/N*100,1))
n <- 10000
N <- n*(n+1)
mu <- 5
world.n <- rgraph(n+1, tprob=mu/n)
D.n <- geodist(world.n)$gdist
A
eigen(A)
A <- symmetrize(A, rule="weak")
A
eigen(A
)
round(eigen(A),2)
round(eigen(A)$vectors,2)
round(eigen(A)$value,2)
evcent(A)
eigen(A)$vectors
A <- matrix(0,5,5)
edge.list <- matrix(
c(1,2,
1,3,
1,5,
2,3,
3,1,
3,4,
5,1),byrow=T,nrow=7
)
A[edge.list] <- 1
evcent(A)
eigen(A)
closeness(A)
closeness(A, cmode="suminvdir")
closeness(t(A), cmode="suminvdir")
degree(A, "indegree")
degree(A, "outdegree")
degree(A, cmode="outdegree")
degree(A, cmode="indegree")
library(igrap)
library(igraph)
n <- 50
G <- graph.ring(n)
plot(G)
plot(G, layout=layout.circle)
plot(G, layout=layout.rectangle)
plot(G, layout=layout.triangle)
plot(G, layout=layout.fruchterman.reingold())
plot(G, layout=layout.fruchterman.reingold
plot(G, layout=layout.fruchterman.reingold)
plot(G, layout=layout.fruchterman.reingold.grid
)
plot(G, layout=layout.bipartite)
plot(G, layout=layout.bipartite())
plot(G, layout=layout.bipartite(G))
plot(G, layout=layout.drl)
?simplyfy
?simplify
simplify(graph = G)
simplify(graph = G)
rewire.edges(G,)
rewire.edges(G)
rewire.edges(G, p=1/n)
rewire(G, p=1/n)
rewire(G)
?rewire
library(sna)
ecount(G
)
watts.strogatz.game()
watts.strogatz.game(G)
watts.strogatz.game(10)
watts.strogatz.game(G,50)
?watts.strogatz.game
watts.strogatz.game(dim=10, size=10)
watts.strogatz.game(dim=10, size=10,nei=2)
watts.strogatz.game(dim=10, size=10,nei=2,0.5)
barabasi.game()
barabasi.game(50)
watts.strogatz.game(50)
neighborhood(A)
neighborhood(G)
data(faux)
install.packages("ergm")
library(egrm)
library(ergm)
data("faux.magnolia.high")
fmh <- faux.magnolia.high
summary(fmh)
str(fmh)
head(fmh)
fmh
class(fmh)
plot(fmh)
netlogit(fmh)
netlogit(~ Grade)
netlogit(~ Grade, data=fmh)
netlogit(Sex ~ Grade, data=fmh)
netlogit(Sex ~ Grade)
netlogit(Sex ~ Grade)
attach(fmh)
netlogit(Sex ~ Grade)
netlogit(fmh ~ Grade)
?netlogit
netlogit(fmh, Grade)
netlogit(fmh, fmh$Grade)
fmh$gal
fmh
fmh$mel
ergm(fmh)
library(ggplot2)
data(Salaries)
library(car)
data("Salaries")
p <- ggplot(aes(x=yrs.service, y=salary), data=Salaries)
p
p + geom_point()
p + geom_point() + geom_smooth(size=1)
p + geom_point() + geom_smooth(size=2)
p + geom_point() + geom_smooth(size=2) + facet_grid(~sex)
p + geom_point() + geom_smooth(size=2) + facet_grid(sex~)
p + geom_point() + geom_smooth(size=2) + facet_grid(~sex)
p + geom_point() + geom_smooth(size=2) + facet_grid(sex~.)
p + geom_point() + geom_smooth(size=2) + facet_grid(~sex)
p + geom_point() + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point() + geom_smooth(size=2) + facet_grid(~sex)
p + geom_point() + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point() + geom_smooth(size=2) + facet_grid(~sex)
p + geom_point() + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point() + geom_smooth(size=2) + facet_grid(~sex)
p + geom_point() + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point(pch=21) + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point(pch=21, color="red") + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point(pch=21, color="red", size3) + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point(pch=21, color="red", size=3) + geom_smooth(size=2) + facet_wrap(~sex)
p + geom_point(pch=21, color="red", size=3) + geom_smooth(size=2) + facet_wrap(~sex) + geom_jitter(size=10)
p + geom_point(pch=21, color="red", size=3) + geom_smooth(size=2) + facet_wrap(~sex) + geom_jitter(size=1)
p + geom_point(pch=21, color="red", size=3) + geom_smooth(size=2) + facet_wrap(~sex) + geom_jitter(size=2)
p + geom_point(pch=20, color="red", size=1) + geom_smooth(size=2) + facet_wrap(~sex) + geom_jitter(size=2)
p + geom_point(pch=20, color="red", size=1) + geom_smooth(size=2) + facet_wrap(~sex)
library(cookbook)
install.packages("cookbook")
install.packages("gcookbook")
library(gcookbook)
data("tophitters2001")
p <- ggplot(aes(x=avg, y=reorder(name,avg)),data=tophitters2001)
p + geom_segment()
p + geom_segment(xend=0, yend=names)
p + geom_segment(xend=0, yend=name)
p + geom_segment(xend=0, aes(yend=name))
p + geom_segment(xend=10, aes(yend=name))
p + geom_segment(xend=1, aes(yend=name))
p + geom_segment(xend=0, aes(yend=name))
?geom_segment
p + geom_segment(xend=c(0,1), aes(yend=name))
p + geom_segment(xend=-1, aes(yend=name))
p + geom_segment(xend=0.3, aes(yend=name))
p + geom_segment(xend=0.3, yend=1)
p + geom_segment(xend=0, yend=1)
p + geom_segment(xend=0, aes(yend=name))
p + geom_segment(xend=0, aes(yend=name)) + geom_point()
install.packages("tidyverse")
library(tidyverse)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
flights
fligts_1a <- filter(flights, !is.na(dep_delay)) %>% tail(arrange(desc(dep_delay))["dep_delay"])
dep_delay
filter(flights, !is.na(dep_daly))
attach(flights)
filter(flights, !is.na(dep_delay))
filter(flights, !is.na(dep_delay)) %>% tail(arrange(desc(dep_delay))["dep_delay"])
filter(flights, !is.na(dep_delay)) %>% arrange(desc(dep_delay))
filter(flights, !is.na(dep_delay)) %>% arrange(desc(dep_delay)) %>% tail()
filter(flights, !is.na(dep_delay)) %>% arrange(desc(dep_delay)) %>% select(dep_delay)
filter(flights, !is.na(dep_delay)) %>% arrange(desc(dep_delay)) %>% select(dep_delay) %>% tail()
flights_1a <- filter(flights, !is.na(dep_delay))
tail(arrange(flights_1a, desc(dep_delay))["dep_delay"])
summarize(flights)
summarize(flights, delay=mean(dep_delay, na.rm=T))
summarize(flights, mean(dep_delay, na.rm=T))
summarize(flights, delay= mean(dep_delay, na.rm=T, trim=0.1))
?mean
summarize(flights, delay= mean(dep_delay, na.rm=T, trim=0.5))
summarize(flights, delay= mean(dep_delay, na.rm=T, trim=0))
summarize(flights, delay= mean(dep_delay, na.rm=T, trim=0.4))
median(dep_delay, na.rm=T)
by_day <- group_by(flights, year, month, day)
by_day
summarize(by_day)
summarize(by_day, delay=mean(dep_delay, na.rm=T))
flights %>% group_by(dest) %>% summarize(count = n(), count1 = n()+1)
library(MASS)
n1 <- 20
n2 <- 40
mu1 <- c(-0.5, 0)
mu2 <- c(0.5, 0)
cw <- matrix(c(0.8,0.5,0.5,1.0),2,2)
xnew <- c(0, 0.5)
(mu2-mu1)%*%solve(cw)%*%xnew > log((1/3)/(2/3)) + (mu2+mu1)%*%solve(cw)%*%(mu2-mu1)/2
(mu1-mu2)%*%solve(cw)%*%xnew > log((2/3)/(1/3)) + (mu1+mu2)%*%solve(cw)%*%(mu1-mu2)/2
mu <- (mu1*20 + mu2*40)/60
n1*(mu1-mu)%*%t(mu1-mu)
n1*(mu1-mu)%*%t(mu1-mu) + n2*(mu2-mu)%*%t(mu2-mu)
B <- n1*(mu1-mu)%*%t(mu1-mu) + n2*(mu2-mu)%*%t(mu2-mu)
mu1-mu
t(mum1-mu)
t(mu1-mu)
(mu1-mu)%*%t(mu1-mu)
t(t(mu1-mu))%*%t(mu1-mu)
B <- n1*(mu1-mu)%*%t(mu1-mu) + n2*(mu2-mu)%*%t(mu2-mu)
a <- eigen(solve(cw)%*%B)$vectors[,1]
t <- t(a)%*%mu1
t
1
t2 <- t(a)%*%mu2
t <- (t1+t2)/2
t1 <- t(a)%*%mu1
t2 <- t(a)%*%mu2
t <- (t1+t2)/2
c0 <- ((mu2-mu1)%*%solve(cw)%*%(mu2+mu1))/2
t
c0
t1
t2
t(a) %*% xnew < c0
t1 <- t(a)%*%mu1
t2 <- t(a)%*%mu2
t1
t2
mu
mu1
mu2
t(a) %*% xnew
a
solve(cw)%*%(mu2-mu1)
a
(mu2-mu1)%*%solve(cw)%*%xnew
t1
t2
ㅠ
B
cw
t(mu2-mu)
(mu2-mu1)%*%solve(cw)%*%xnew
log((1/3)/(2/3)) + (mu2+mu1)%*%solve(cw)%*%(mu2-mu1)/2
(mu1-mu2)%*%solve(cw)%*%xnew
log((2/3)/(1/3)) + (mu1+mu2)%*%solve(cw)%*%(mu1-mu2)/2
c0 <- ((mu2-mu1)%*%solve(cw)%*%(mu2+mu1))/2
c0
t1
t2
mu2-mu1
mu2+mu1
t(a)%*%xnew
t(a) %*% xnew
(mu2-mu1)%*%solve(cw)%*%xnew > log((1/3)/(2/3)) + (mu2+mu1)%*%solve(cw)%*%(mu2-mu1)/2
t(a) %*% xnew < c0
t(a) %*% xnew < c0
n1 <- 25; n2 <- 35; n3 <- 25; n <- n1+n2+n3;
mu1 <- c(-0.91, 1.08)
mu2 <- c(-0.08, -0.17)
mu3 <- c(1.03, 1.16)
w1 <- matrix(c(25.2,20.5,20.5,19.8),2,2)
w2 <- matrix(c(38.2,33.8,33.8,41.0),2,2)
w3 <- matrix(c(20.2,16.9,16.9,21.5),2,2)
xnew <- c(0,1)
p1 <- (n1/n) * (1/(2*pi*sqrt(det(w1/(n1-1))))) * exp(-(xnew-mu1)%*%solve(w1/(n1-1))%*%(xnew-mu1)/2)
p2 <- (n2/n) * (1/(2*pi*sqrt(det(w2/(n2-1))))) * exp(-(xnew-mu2)%*%solve(w2/(n2-1))%*%(xnew-mu2)/2)
p3 <- (n3/n) * (1/(2*pi*sqrt(det(w3/(n3-1))))) * exp(-(xnew-mu3)%*%solve(w3/(n3-1))%*%(xnew-mu3)/2)
p <- p1+p2+p3
pos1 <- p1/p
pos2 <- p2/p
pos3 <- p3/p
pos1;pos2;pos3;
p1 <- (n1/n) * (1/(2*pi*sqrt(det(w1)))) * exp(-(xnew-mu1)%*%solve(w1)%*%(xnew-mu1)/2)
p2 <- (n2/n) * (1/(2*pi*sqrt(det(w2)))) * exp(-(xnew-mu2)%*%solve(w2)%*%(xnew-mu2)/2)
p3 <- (n3/n) * (1/(2*pi*sqrt(det(w3)))) * exp(-(xnew-mu3)%*%solve(w3)%*%(xnew-mu3)/2)
p <- p1+p2+p3
pos1 <- p1/p
pos2 <- p2/p
pos3 <- p3/p
pos1;pos2;pos3;
a
version
# install.packages("tm")
# install.packages("rpart.plot")
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tm) # For NLP; creating bag-of-words
library(caret)
library(rpart)
library(rpart.plot)
install.packages("caret")
install.packages("tm")
install.packages("rpart.plot")
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tm) # For NLP; creating bag-of-words
library(caret)
library(rpart)
library(rpart.plot)
train <- fromJSON("train.json", flatten = TRUE)
train <- fromJSON("train.json", flatten = TRUE)
getwd()
setwd("../../DataAnalysis/kaggle/What's Cooking/datasets")
setwd("../..")
getwd()
setwd("OneDrive/문서")
setwd("../../Desktop/DataAnalysis/kaggle/What's Cooking/datasets")
train <- fromJSON("train.json", flatten = TRUE)
ggplot(data = train, aes(x = cuisine)) +
geom_histogram(stat = "count") +
labs(title = "Cuisines", x = "Cuisine", y = "Number of Recipes") +
theme(axis.text.x=element_text(angle=45))
ingredients <- Corpus(VectorSource(train$ingredients))
ingredients
install.packages("SnowballC")
library(SnowballC)
ingredients <- tm_map(ingredients, stemDocument)
ingredients
ingredientsDTM <- DocumentTermMatrix(ingredients)
ingredientsDTM
sparse <- removeSparseTerms(ingredientsDTM, 0.99)
sparse
ingredientsDTM <- as.data.frame(as.matrix(sparse))
ingredientsDTM$cuisine <- as.factor(train$cuisine)
ingredients
ingredientsDTM
inTrain <- createDataPartition(y = ingredientsDTM$cuisine, p = 0.6, list = FALSE)
training <- ingredientsDTM[inTrain,]
testing <- ingredientsDTM[-inTrain,]
set.seed(9347)
cartModelFit <- rpart(cuisine ~ ., data = training, method = "class")
prp(cartModelFit)
library(caret)
??prp
?prp
library(tm) # For NLP; creating bag-of-words
library(caret)
library(rpart)
library(rpart.plot)
library(jsonlite)
library(dplyr)
library(ggplot2)
install.packages("rpart.plot")
library(rpart.plot)
?install.packages
